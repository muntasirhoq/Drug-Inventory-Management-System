CREATE OR REPLACE TRIGGER DRUG.SHIPMENT_INVENTORY
AFTER INSERT
ON SHIPMENTQUANTITY
FOR EACH ROW
DECLARE
	V_BATCHNO VARCHAR2(6);
	V_MEDICINEID VARCHAR2(6);
	V_QUANTITY NUMBER(6);
	V_EXPIRYDATE VARCHAR2(12);
BEGIN
	V_BATCHNO := :NEW.BATCHNO;
	V_MEDICINEID := :NEW.MEDICINEID;
	V_QUANTITY := :NEW.QUANTITY;
	V_EXPIRYDATE := :NEW.EXPIRYDATE;
	INSERT INTO INVENTORY VALUES (V_BATCHNO,V_MEDICINEID,V_QUANTITY,V_EXPIRYDATE);
END ;
/


CREATE OR REPLACE TRIGGER DRUG.UPDATE_COMPANY_DUE
AFTER INSERT
ON SHIPMENT
FOR EACH ROW
DECLARE
	V_ORDERNO VARCHAR2(6);
	V_COMPANYID VARCHAR2(6);
	V_PAIDAMOUNT NUMBER(6);
	V_TOTAL NUMBER(6);
	V_DUE NUMBER(6);
BEGIN
	V_PAIDAMOUNT := :NEW.PAIDAMOUNT;
	V_ORDERNO := :NEW.ORDERNO;
	V_COMPANYID := :NEW.COMPANYID;
	V_TOTAL := 0;
	FOR R IN (SELECT QUANTITY,PURCHASEDPRICE FROM SHIPMENTQUANTITY WHERE V_ORDERNO=ORDERNO)
	LOOP
		V_TOTAL := V_TOTAL+(R.QUANTITY*R.PURCHASEDPRICE);
	END LOOP;
	V_DUE := V_TOTAL-V_PAIDAMOUNT;
	UPDATE COMPANY SET DUE=DUE+V_DUE WHERE COMPANYID=V_COMPANYID;
END ;
/



CREATE OR REPLACE TRIGGER DRUG.UPDATE_CLIENT_DUE
AFTER INSERT
ON PURCHASE
FOR EACH ROW
DECLARE
	V_INVOICENO VARCHAR2(6);
	V_CLIENTID VARCHAR2(6);
	V_PAIDAMOUNT NUMBER(6);
	V_TEMP NUMBER(6);
	V_TOTAL NUMBER(6);
	V_DUE NUMBER(6);
BEGIN
	V_PAIDAMOUNT := :NEW.PAIDAMOUNT + :NEW.DISCOUNT;
	V_INVOICENO := :NEW.INVOICENO;
	V_CLIENTID := :NEW.CLIENTID;
	V_TOTAL := 0;
	FOR R IN (SELECT QUANTITY,MEDICINEID FROM PURCHASEQUANTITY WHERE V_INVOICENO=INVOICENO)
	LOOP
		SELECT RETAILEDPRICE INTO V_TEMP FROM MEDICINE WHERE MEDICINEID=R.MEDICINEID;
		V_TOTAL := V_TOTAL+(R.QUANTITY* V_TEMP );
	END LOOP;
	V_DUE := V_TOTAL-V_PAIDAMOUNT;
	UPDATE CLIENT SET DUE=DUE+V_DUE WHERE CLIENTID=V_CLIENTID;
END ;
/


CREATE OR REPLACE TRIGGER DRUG.UPDATE_INVENTORY
AFTER INSERT
ON PURCHASEQUANTITY
FOR EACH ROW
DECLARE
	V_MEDICINEID VARCHAR2(6);
	V_BATCHNO VARCHAR2(6);
	V_QUANTITY NUMBER(3);
	V_TEMP NUMBER(3);
BEGIN
	V_MEDICINEID := :NEW.MEDICINEID;
	V_BATCHNO := :NEW.BATCHNO;
	V_QUANTITY := :NEW.QUANTITY;
	UPDATE INVENTORY SET QUANTITY=(QUANTITY-V_QUANTITY) WHERE BATCHNO=V_BATCHNO AND MEDICINEID=V_MEDICINEID;
END ;
/


CREATE OR REPLACE TRIGGER DELETE_CLIENT
BEFORE DELETE
ON CLIENT
FOR EACH ROW
DECLARE
	V_CLIENTID VARCHAR2(6);
	V_INVOICENO VARCHAR2(6);
BEGIN
	V_CLIENTID := :OLD.CLIENTID ;
	FOR R IN (SELECT INVOICENO FROM PURCHASE WHERE CLIENTID=V_CLIENTID)
	LOOP
		DELETE FROM PURCHASEQUANTITY WHERE INVOICENO=R.INVOICENO;
	END LOOP;
	DELETE FROM PURCHASE WHERE CLIENTID=V_CLIENTID;
	INSERT INTO OLDCLIENT VALUES (:OLD.FIRSTNAME,:OLD.LASTNAME,:OLD.CLIENTID,:OLD.DUE,:OLD.ADDRESS,:OLD.PHONENO);
END ;
/



CREATE OR REPLACE TRIGGER DELETE_MEDICINE
BEFORE DELETE
ON MEDICINE
FOR EACH ROW
DECLARE
	V_MEDICINEID VARCHAR2(6);
BEGIN
	V_MEDICINEID := :OLD.MEDICINEID ;
	DELETE FROM SHIPMENTQUANTITY WHERE MEDICINEID=V_MEDICINEID;
	DELETE FROM PURCHASEQUANTITY WHERE MEDICINEID=V_MEDICINEID;
	DELETE FROM INVENTORY WHERE MEDICINEID=V_MEDICINEID;
END ;
/


CREATE OR REPLACE TRIGGER INVALID_PURCHASE
BEFORE INSERT
ON PURCHASEQUANTITY
FOR EACH ROW
DECLARE
	V_BATCHNO VARCHAR2(6);
	V_MEDICINEID VARCHAR2(6);
	V_INVOICENO VARCHAR2(6);
	V_QUANTITY NUMBER(6);
	V_TEMP NUMBER(6);
BEGIN
	V_BATCHNO := :NEW.BATCHNO ;
	V_MEDICINEID := :NEW.MEDICINEID ;
	V_INVOICENO := :NEW.INVOICENO ;
	V_QUANTITY := :NEW.QUANTITY ;
	SELECT QUANTITY INTO V_TEMP FROM INVENTORY WHERE BATCHNO=V_BATCHNO AND MEDICINEID=V_MEDICINEID;
	IF V_TEMP<V_QUANTITY THEN
		:NEW.BATCHNO := NULL;
		:NEW.MEDICINEID := NULL ;
		:NEW.INVOICENO := NULL;
		:NEW.QUANTITY := NULL;
	END IF;
END ;
/



CREATE SEQUENCE MEDICINE_ID_SEQ
INCREMENT BY 1
START WITH 1001
MAXVALUE 6999
NOCYCLE ;

CREATE SEQUENCE COMPANY_ID_SEQ
INCREMENT BY 1
START WITH 7001
MAXVALUE 7999
NOCYCLE ;

CREATE SEQUENCE WORKER_ID_SEQ
INCREMENT BY 1
START WITH 8001
MAXVALUE 8999
NOCYCLE ;

CREATE SEQUENCE CLIENT_ID_SEQ
INCREMENT BY 1
START WITH 9001
MAXVALUE 9999
NOCYCLE ;

CREATE SEQUENCE DRUG_SEQ
INCREMENT BY 1
START WITH 1001
MAXVALUE 1999
NOCYCLE ;